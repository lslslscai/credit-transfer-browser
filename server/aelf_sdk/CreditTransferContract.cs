// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: credit_transfer_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from credit_transfer_contract.proto</summary>
public static partial class CreditTransferContractReflection {

  #region Descriptor
  /// <summary>File descriptor for credit_transfer_contract.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static CreditTransferContractReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Ch5jcmVkaXRfdHJhbnNmZXJfY29udHJhY3QucHJvdG8aC3R5cGVzLnByb3Rv",
          "Ghtnb29nbGUvcHJvdG9idWYvZW1wdHkucHJvdG8aHmdvb2dsZS9wcm90b2J1",
          "Zi93cmFwcGVycy5wcm90byJpCgpDb3Vyc2VJbmZvEhAKCGNvdXJzZUlEGAEg",
          "ASgJEhQKDGlzQ29tcHVsc29yeRgCIAEoCBISCgpjb3Vyc2VUeXBlGAMgASgE",
          "Eg4KBmNyZWRpdBgEIAEoBBIPCgdpc1ZhbGlkGAUgASgIIokBCgxDb3Vyc2VS",
          "ZWNvcmQSEAoIY291cnNlSUQYASABKAkSEQoJc3R1ZGVudElEGAIgASgJEhsK",
          "CHByb3RvY29sGAMgASgLMgkuUHJvdG9jb2wSDQoFc3RhdGUYBCABKAgSCwoD",
          "R1BBGAUgASgEEg0KBXNjb3JlGAYgASgEEgwKBG5vdGUYByABKAkiGwoIUHJv",
          "dG9jb2wSDwoHcHJvdG9JRBgBIAEoCSI3CgNTUlQSEQoJc3R1ZGVudElEGAEg",
          "ASgJEg4KBnJhdGluZxgCIAEoBBINCgVzdGF0ZRgDIAEoBCJLCgZTY2hvb2wS",
          "EAoIc2Nob29sSUQYASABKAkSHwoNc2Nob29sQWRkcmVzcxgCIAEoCzIILkFk",
          "ZHJlc3MSDgoGcmF0aW5nGAMgASgEIj4KB1RlYWNoZXISIAoOdGVhY2hlckFk",
          "ZHJlc3MYASABKAsyCC5BZGRyZXNzEhEKCXRlYWNoZXJJRBgCIAEoCSJfCg1T",
          "UlVwbG9hZElucHV0EhEKCXN0dWRlbnRJRBgBIAEoCRIQCghjb3Vyc2VJRBgC",
          "IAEoCRIbCghwcm90b2NvbBgDIAEoCzIJLlByb3RvY29sEgwKBG5vdGUYBCAB",
          "KAkiMgoLU1JEcm9wSW5wdXQSEQoJc3R1ZGVudElEGAEgASgJEhAKCGNvdXJz",
          "ZUlEGAIgASgJIl8KDVNSTW9kaWZ5SW5wdXQSEQoJc3R1ZGVudElEGAEgASgJ",
          "EhAKCGNvdXJzZUlEGAIgASgJEg0KBXN0YXRlGAMgASgIEgsKA0dQQRgEIAEo",
          "BBINCgVzY29yZRgFIAEoBGIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::TypesReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CourseInfo), global::CourseInfo.Parser, new[]{ "CourseID", "IsCompulsory", "CourseType", "Credit", "IsValid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CourseRecord), global::CourseRecord.Parser, new[]{ "CourseID", "StudentID", "Protocol", "State", "GPA", "Score", "Note" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Protocol), global::Protocol.Parser, new[]{ "ProtoID" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SRT), global::SRT.Parser, new[]{ "StudentID", "Rating", "State" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::School), global::School.Parser, new[]{ "SchoolID", "SchoolAddress", "Rating" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Teacher), global::Teacher.Parser, new[]{ "TeacherAddress", "TeacherID" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SRUploadInput), global::SRUploadInput.Parser, new[]{ "StudentID", "CourseID", "Protocol", "Note" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SRDropInput), global::SRDropInput.Parser, new[]{ "StudentID", "CourseID" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SRModifyInput), global::SRModifyInput.Parser, new[]{ "StudentID", "CourseID", "State", "GPA", "Score" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///user data
/// </summary>
public sealed partial class CourseInfo : pb::IMessage<CourseInfo> {
  private static readonly pb::MessageParser<CourseInfo> _parser = new pb::MessageParser<CourseInfo>(() => new CourseInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CourseInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CreditTransferContractReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CourseInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CourseInfo(CourseInfo other) : this() {
    courseID_ = other.courseID_;
    isCompulsory_ = other.isCompulsory_;
    courseType_ = other.courseType_;
    credit_ = other.credit_;
    isValid_ = other.isValid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CourseInfo Clone() {
    return new CourseInfo(this);
  }

  /// <summary>Field number for the "courseID" field.</summary>
  public const int CourseIDFieldNumber = 1;
  private string courseID_ = "";
  /// <summary>
  ///course's ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CourseID {
    get { return courseID_; }
    set {
      courseID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "isCompulsory" field.</summary>
  public const int IsCompulsoryFieldNumber = 2;
  private bool isCompulsory_;
  /// <summary>
  ///if the course is compulsory, it will be true
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsCompulsory {
    get { return isCompulsory_; }
    set {
      isCompulsory_ = value;
    }
  }

  /// <summary>Field number for the "courseType" field.</summary>
  public const int CourseTypeFieldNumber = 3;
  private ulong courseType_;
  /// <summary>
  ///used to identify courses' type (will be defined in constants)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong CourseType {
    get { return courseType_; }
    set {
      courseType_ = value;
    }
  }

  /// <summary>Field number for the "credit" field.</summary>
  public const int CreditFieldNumber = 4;
  private ulong credit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Credit {
    get { return credit_; }
    set {
      credit_ = value;
    }
  }

  /// <summary>Field number for the "isValid" field.</summary>
  public const int IsValidFieldNumber = 5;
  private bool isValid_;
  /// <summary>
  ///show if the course is valid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsValid {
    get { return isValid_; }
    set {
      isValid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CourseInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CourseInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CourseID != other.CourseID) return false;
    if (IsCompulsory != other.IsCompulsory) return false;
    if (CourseType != other.CourseType) return false;
    if (Credit != other.Credit) return false;
    if (IsValid != other.IsValid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CourseID.Length != 0) hash ^= CourseID.GetHashCode();
    if (IsCompulsory != false) hash ^= IsCompulsory.GetHashCode();
    if (CourseType != 0UL) hash ^= CourseType.GetHashCode();
    if (Credit != 0UL) hash ^= Credit.GetHashCode();
    if (IsValid != false) hash ^= IsValid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CourseID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(CourseID);
    }
    if (IsCompulsory != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsCompulsory);
    }
    if (CourseType != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(CourseType);
    }
    if (Credit != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(Credit);
    }
    if (IsValid != false) {
      output.WriteRawTag(40);
      output.WriteBool(IsValid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CourseID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CourseID);
    }
    if (IsCompulsory != false) {
      size += 1 + 1;
    }
    if (CourseType != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CourseType);
    }
    if (Credit != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Credit);
    }
    if (IsValid != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CourseInfo other) {
    if (other == null) {
      return;
    }
    if (other.CourseID.Length != 0) {
      CourseID = other.CourseID;
    }
    if (other.IsCompulsory != false) {
      IsCompulsory = other.IsCompulsory;
    }
    if (other.CourseType != 0UL) {
      CourseType = other.CourseType;
    }
    if (other.Credit != 0UL) {
      Credit = other.Credit;
    }
    if (other.IsValid != false) {
      IsValid = other.IsValid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          CourseID = input.ReadString();
          break;
        }
        case 16: {
          IsCompulsory = input.ReadBool();
          break;
        }
        case 24: {
          CourseType = input.ReadUInt64();
          break;
        }
        case 32: {
          Credit = input.ReadUInt64();
          break;
        }
        case 40: {
          IsValid = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CourseRecord : pb::IMessage<CourseRecord> {
  private static readonly pb::MessageParser<CourseRecord> _parser = new pb::MessageParser<CourseRecord>(() => new CourseRecord());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CourseRecord> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CreditTransferContractReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CourseRecord() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CourseRecord(CourseRecord other) : this() {
    courseID_ = other.courseID_;
    studentID_ = other.studentID_;
    protocol_ = other.protocol_ != null ? other.protocol_.Clone() : null;
    state_ = other.state_;
    gPA_ = other.gPA_;
    score_ = other.score_;
    note_ = other.note_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CourseRecord Clone() {
    return new CourseRecord(this);
  }

  /// <summary>Field number for the "courseID" field.</summary>
  public const int CourseIDFieldNumber = 1;
  private string courseID_ = "";
  /// <summary>
  ///course‘s basic info
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CourseID {
    get { return courseID_; }
    set {
      courseID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "studentID" field.</summary>
  public const int StudentIDFieldNumber = 2;
  private string studentID_ = "";
  /// <summary>
  ///student that have the course
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string StudentID {
    get { return studentID_; }
    set {
      studentID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "protocol" field.</summary>
  public const int ProtocolFieldNumber = 3;
  private global::Protocol protocol_;
  /// <summary>
  ///protocol about the course
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Protocol Protocol {
    get { return protocol_; }
    set {
      protocol_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 4;
  private bool state_;
  /// <summary>
  ///show course's state (completed, completing, etc.)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "GPA" field.</summary>
  public const int GPAFieldNumber = 5;
  private ulong gPA_;
  /// <summary>
  ///course's credit (float)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong GPA {
    get { return gPA_; }
    set {
      gPA_ = value;
    }
  }

  /// <summary>Field number for the "score" field.</summary>
  public const int ScoreFieldNumber = 6;
  private ulong score_;
  /// <summary>
  ///course's score that student gets (float)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Score {
    get { return score_; }
    set {
      score_ = value;
    }
  }

  /// <summary>Field number for the "note" field.</summary>
  public const int NoteFieldNumber = 7;
  private string note_ = "";
  /// <summary>
  ///notifications
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Note {
    get { return note_; }
    set {
      note_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CourseRecord);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CourseRecord other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CourseID != other.CourseID) return false;
    if (StudentID != other.StudentID) return false;
    if (!object.Equals(Protocol, other.Protocol)) return false;
    if (State != other.State) return false;
    if (GPA != other.GPA) return false;
    if (Score != other.Score) return false;
    if (Note != other.Note) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CourseID.Length != 0) hash ^= CourseID.GetHashCode();
    if (StudentID.Length != 0) hash ^= StudentID.GetHashCode();
    if (protocol_ != null) hash ^= Protocol.GetHashCode();
    if (State != false) hash ^= State.GetHashCode();
    if (GPA != 0UL) hash ^= GPA.GetHashCode();
    if (Score != 0UL) hash ^= Score.GetHashCode();
    if (Note.Length != 0) hash ^= Note.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CourseID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(CourseID);
    }
    if (StudentID.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(StudentID);
    }
    if (protocol_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Protocol);
    }
    if (State != false) {
      output.WriteRawTag(32);
      output.WriteBool(State);
    }
    if (GPA != 0UL) {
      output.WriteRawTag(40);
      output.WriteUInt64(GPA);
    }
    if (Score != 0UL) {
      output.WriteRawTag(48);
      output.WriteUInt64(Score);
    }
    if (Note.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(Note);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CourseID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CourseID);
    }
    if (StudentID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(StudentID);
    }
    if (protocol_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Protocol);
    }
    if (State != false) {
      size += 1 + 1;
    }
    if (GPA != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GPA);
    }
    if (Score != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Score);
    }
    if (Note.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Note);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CourseRecord other) {
    if (other == null) {
      return;
    }
    if (other.CourseID.Length != 0) {
      CourseID = other.CourseID;
    }
    if (other.StudentID.Length != 0) {
      StudentID = other.StudentID;
    }
    if (other.protocol_ != null) {
      if (protocol_ == null) {
        Protocol = new global::Protocol();
      }
      Protocol.MergeFrom(other.Protocol);
    }
    if (other.State != false) {
      State = other.State;
    }
    if (other.GPA != 0UL) {
      GPA = other.GPA;
    }
    if (other.Score != 0UL) {
      Score = other.Score;
    }
    if (other.Note.Length != 0) {
      Note = other.Note;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          CourseID = input.ReadString();
          break;
        }
        case 18: {
          StudentID = input.ReadString();
          break;
        }
        case 26: {
          if (protocol_ == null) {
            Protocol = new global::Protocol();
          }
          input.ReadMessage(Protocol);
          break;
        }
        case 32: {
          State = input.ReadBool();
          break;
        }
        case 40: {
          GPA = input.ReadUInt64();
          break;
        }
        case 48: {
          Score = input.ReadUInt64();
          break;
        }
        case 58: {
          Note = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Protocol : pb::IMessage<Protocol> {
  private static readonly pb::MessageParser<Protocol> _parser = new pb::MessageParser<Protocol>(() => new Protocol());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Protocol> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CreditTransferContractReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Protocol() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Protocol(Protocol other) : this() {
    protoID_ = other.protoID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Protocol Clone() {
    return new Protocol(this);
  }

  /// <summary>Field number for the "protoID" field.</summary>
  public const int ProtoIDFieldNumber = 1;
  private string protoID_ = "";
  /// <summary>
  ///protocol's ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ProtoID {
    get { return protoID_; }
    set {
      protoID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Protocol);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Protocol other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ProtoID != other.ProtoID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ProtoID.Length != 0) hash ^= ProtoID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ProtoID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(ProtoID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ProtoID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ProtoID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Protocol other) {
    if (other == null) {
      return;
    }
    if (other.ProtoID.Length != 0) {
      ProtoID = other.ProtoID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ProtoID = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class SRT : pb::IMessage<SRT> {
  private static readonly pb::MessageParser<SRT> _parser = new pb::MessageParser<SRT>(() => new SRT());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SRT> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CreditTransferContractReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SRT() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SRT(SRT other) : this() {
    studentID_ = other.studentID_;
    rating_ = other.rating_;
    state_ = other.state_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SRT Clone() {
    return new SRT(this);
  }

  /// <summary>Field number for the "studentID" field.</summary>
  public const int StudentIDFieldNumber = 1;
  private string studentID_ = "";
  /// <summary>
  ///student's ID, it's composed by UID itself and School ID 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string StudentID {
    get { return studentID_; }
    set {
      studentID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "rating" field.</summary>
  public const int RatingFieldNumber = 2;
  private ulong rating_;
  /// <summary>
  /// e.g.: A student has a real ID of 10001, his school's ID is 345. Then his studentID will be 34510001
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Rating {
    get { return rating_; }
    set {
      rating_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 3;
  private ulong state_;
  /// <summary>
  ///show student's state(studying, graduated, retreated)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SRT);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SRT other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StudentID != other.StudentID) return false;
    if (Rating != other.Rating) return false;
    if (State != other.State) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StudentID.Length != 0) hash ^= StudentID.GetHashCode();
    if (Rating != 0UL) hash ^= Rating.GetHashCode();
    if (State != 0UL) hash ^= State.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StudentID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(StudentID);
    }
    if (Rating != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Rating);
    }
    if (State != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(State);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StudentID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(StudentID);
    }
    if (Rating != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Rating);
    }
    if (State != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(State);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SRT other) {
    if (other == null) {
      return;
    }
    if (other.StudentID.Length != 0) {
      StudentID = other.StudentID;
    }
    if (other.Rating != 0UL) {
      Rating = other.Rating;
    }
    if (other.State != 0UL) {
      State = other.State;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          StudentID = input.ReadString();
          break;
        }
        case 16: {
          Rating = input.ReadUInt64();
          break;
        }
        case 24: {
          State = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class School : pb::IMessage<School> {
  private static readonly pb::MessageParser<School> _parser = new pb::MessageParser<School>(() => new School());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<School> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CreditTransferContractReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public School() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public School(School other) : this() {
    schoolID_ = other.schoolID_;
    schoolAddress_ = other.schoolAddress_ != null ? other.schoolAddress_.Clone() : null;
    rating_ = other.rating_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public School Clone() {
    return new School(this);
  }

  /// <summary>Field number for the "schoolID" field.</summary>
  public const int SchoolIDFieldNumber = 1;
  private string schoolID_ = "";
  /// <summary>
  ///school's ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SchoolID {
    get { return schoolID_; }
    set {
      schoolID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "schoolAddress" field.</summary>
  public const int SchoolAddressFieldNumber = 2;
  private global::Address schoolAddress_;
  /// <summary>
  ///school's blockchain account's address
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Address SchoolAddress {
    get { return schoolAddress_; }
    set {
      schoolAddress_ = value;
    }
  }

  /// <summary>Field number for the "rating" field.</summary>
  public const int RatingFieldNumber = 3;
  private ulong rating_;
  /// <summary>
  ///shows how actively school and its students participate in the system (float)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Rating {
    get { return rating_; }
    set {
      rating_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as School);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(School other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SchoolID != other.SchoolID) return false;
    if (!object.Equals(SchoolAddress, other.SchoolAddress)) return false;
    if (Rating != other.Rating) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SchoolID.Length != 0) hash ^= SchoolID.GetHashCode();
    if (schoolAddress_ != null) hash ^= SchoolAddress.GetHashCode();
    if (Rating != 0UL) hash ^= Rating.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SchoolID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SchoolID);
    }
    if (schoolAddress_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(SchoolAddress);
    }
    if (Rating != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(Rating);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SchoolID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SchoolID);
    }
    if (schoolAddress_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchoolAddress);
    }
    if (Rating != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Rating);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(School other) {
    if (other == null) {
      return;
    }
    if (other.SchoolID.Length != 0) {
      SchoolID = other.SchoolID;
    }
    if (other.schoolAddress_ != null) {
      if (schoolAddress_ == null) {
        SchoolAddress = new global::Address();
      }
      SchoolAddress.MergeFrom(other.SchoolAddress);
    }
    if (other.Rating != 0UL) {
      Rating = other.Rating;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SchoolID = input.ReadString();
          break;
        }
        case 18: {
          if (schoolAddress_ == null) {
            SchoolAddress = new global::Address();
          }
          input.ReadMessage(SchoolAddress);
          break;
        }
        case 24: {
          Rating = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class Teacher : pb::IMessage<Teacher> {
  private static readonly pb::MessageParser<Teacher> _parser = new pb::MessageParser<Teacher>(() => new Teacher());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Teacher> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CreditTransferContractReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Teacher() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Teacher(Teacher other) : this() {
    teacherAddress_ = other.teacherAddress_ != null ? other.teacherAddress_.Clone() : null;
    teacherID_ = other.teacherID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Teacher Clone() {
    return new Teacher(this);
  }

  /// <summary>Field number for the "teacherAddress" field.</summary>
  public const int TeacherAddressFieldNumber = 1;
  private global::Address teacherAddress_;
  /// <summary>
  ///教师对应钱包地址
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Address TeacherAddress {
    get { return teacherAddress_; }
    set {
      teacherAddress_ = value;
    }
  }

  /// <summary>Field number for the "teacherID" field.</summary>
  public const int TeacherIDFieldNumber = 2;
  private string teacherID_ = "";
  /// <summary>
  ///教师编号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TeacherID {
    get { return teacherID_; }
    set {
      teacherID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Teacher);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Teacher other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(TeacherAddress, other.TeacherAddress)) return false;
    if (TeacherID != other.TeacherID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (teacherAddress_ != null) hash ^= TeacherAddress.GetHashCode();
    if (TeacherID.Length != 0) hash ^= TeacherID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (teacherAddress_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(TeacherAddress);
    }
    if (TeacherID.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(TeacherID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (teacherAddress_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeacherAddress);
    }
    if (TeacherID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TeacherID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Teacher other) {
    if (other == null) {
      return;
    }
    if (other.teacherAddress_ != null) {
      if (teacherAddress_ == null) {
        TeacherAddress = new global::Address();
      }
      TeacherAddress.MergeFrom(other.TeacherAddress);
    }
    if (other.TeacherID.Length != 0) {
      TeacherID = other.TeacherID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (teacherAddress_ == null) {
            TeacherAddress = new global::Address();
          }
          input.ReadMessage(TeacherAddress);
          break;
        }
        case 18: {
          TeacherID = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///data in process
/// </summary>
public sealed partial class SRUploadInput : pb::IMessage<SRUploadInput> {
  private static readonly pb::MessageParser<SRUploadInput> _parser = new pb::MessageParser<SRUploadInput>(() => new SRUploadInput());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SRUploadInput> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CreditTransferContractReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SRUploadInput() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SRUploadInput(SRUploadInput other) : this() {
    studentID_ = other.studentID_;
    courseID_ = other.courseID_;
    protocol_ = other.protocol_ != null ? other.protocol_.Clone() : null;
    note_ = other.note_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SRUploadInput Clone() {
    return new SRUploadInput(this);
  }

  /// <summary>Field number for the "studentID" field.</summary>
  public const int StudentIDFieldNumber = 1;
  private string studentID_ = "";
  /// <summary>
  ///student that want the course
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string StudentID {
    get { return studentID_; }
    set {
      studentID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "courseID" field.</summary>
  public const int CourseIDFieldNumber = 2;
  private string courseID_ = "";
  /// <summary>
  ///course that to be selected
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CourseID {
    get { return courseID_; }
    set {
      courseID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "protocol" field.</summary>
  public const int ProtocolFieldNumber = 3;
  private global::Protocol protocol_;
  /// <summary>
  ///protocol about the course
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Protocol Protocol {
    get { return protocol_; }
    set {
      protocol_ = value;
    }
  }

  /// <summary>Field number for the "note" field.</summary>
  public const int NoteFieldNumber = 4;
  private string note_ = "";
  /// <summary>
  ///notification
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Note {
    get { return note_; }
    set {
      note_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SRUploadInput);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SRUploadInput other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StudentID != other.StudentID) return false;
    if (CourseID != other.CourseID) return false;
    if (!object.Equals(Protocol, other.Protocol)) return false;
    if (Note != other.Note) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StudentID.Length != 0) hash ^= StudentID.GetHashCode();
    if (CourseID.Length != 0) hash ^= CourseID.GetHashCode();
    if (protocol_ != null) hash ^= Protocol.GetHashCode();
    if (Note.Length != 0) hash ^= Note.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StudentID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(StudentID);
    }
    if (CourseID.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(CourseID);
    }
    if (protocol_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Protocol);
    }
    if (Note.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Note);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StudentID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(StudentID);
    }
    if (CourseID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CourseID);
    }
    if (protocol_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Protocol);
    }
    if (Note.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Note);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SRUploadInput other) {
    if (other == null) {
      return;
    }
    if (other.StudentID.Length != 0) {
      StudentID = other.StudentID;
    }
    if (other.CourseID.Length != 0) {
      CourseID = other.CourseID;
    }
    if (other.protocol_ != null) {
      if (protocol_ == null) {
        Protocol = new global::Protocol();
      }
      Protocol.MergeFrom(other.Protocol);
    }
    if (other.Note.Length != 0) {
      Note = other.Note;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          StudentID = input.ReadString();
          break;
        }
        case 18: {
          CourseID = input.ReadString();
          break;
        }
        case 26: {
          if (protocol_ == null) {
            Protocol = new global::Protocol();
          }
          input.ReadMessage(Protocol);
          break;
        }
        case 34: {
          Note = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class SRDropInput : pb::IMessage<SRDropInput> {
  private static readonly pb::MessageParser<SRDropInput> _parser = new pb::MessageParser<SRDropInput>(() => new SRDropInput());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SRDropInput> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CreditTransferContractReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SRDropInput() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SRDropInput(SRDropInput other) : this() {
    studentID_ = other.studentID_;
    courseID_ = other.courseID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SRDropInput Clone() {
    return new SRDropInput(this);
  }

  /// <summary>Field number for the "studentID" field.</summary>
  public const int StudentIDFieldNumber = 1;
  private string studentID_ = "";
  /// <summary>
  ///student that have the course
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string StudentID {
    get { return studentID_; }
    set {
      studentID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "courseID" field.</summary>
  public const int CourseIDFieldNumber = 2;
  private string courseID_ = "";
  /// <summary>
  ///course that is selected
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CourseID {
    get { return courseID_; }
    set {
      courseID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SRDropInput);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SRDropInput other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StudentID != other.StudentID) return false;
    if (CourseID != other.CourseID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StudentID.Length != 0) hash ^= StudentID.GetHashCode();
    if (CourseID.Length != 0) hash ^= CourseID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StudentID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(StudentID);
    }
    if (CourseID.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(CourseID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StudentID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(StudentID);
    }
    if (CourseID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CourseID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SRDropInput other) {
    if (other == null) {
      return;
    }
    if (other.StudentID.Length != 0) {
      StudentID = other.StudentID;
    }
    if (other.CourseID.Length != 0) {
      CourseID = other.CourseID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          StudentID = input.ReadString();
          break;
        }
        case 18: {
          CourseID = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class SRModifyInput : pb::IMessage<SRModifyInput> {
  private static readonly pb::MessageParser<SRModifyInput> _parser = new pb::MessageParser<SRModifyInput>(() => new SRModifyInput());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SRModifyInput> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CreditTransferContractReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SRModifyInput() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SRModifyInput(SRModifyInput other) : this() {
    studentID_ = other.studentID_;
    courseID_ = other.courseID_;
    state_ = other.state_;
    gPA_ = other.gPA_;
    score_ = other.score_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SRModifyInput Clone() {
    return new SRModifyInput(this);
  }

  /// <summary>Field number for the "studentID" field.</summary>
  public const int StudentIDFieldNumber = 1;
  private string studentID_ = "";
  /// <summary>
  ///student that have the course
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string StudentID {
    get { return studentID_; }
    set {
      studentID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "courseID" field.</summary>
  public const int CourseIDFieldNumber = 2;
  private string courseID_ = "";
  /// <summary>
  ///course that is selected
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CourseID {
    get { return courseID_; }
    set {
      courseID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 3;
  private bool state_;
  /// <summary>
  ///show course's state (completed, completing, etc.)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "GPA" field.</summary>
  public const int GPAFieldNumber = 4;
  private ulong gPA_;
  /// <summary>
  ///course's credit (float)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong GPA {
    get { return gPA_; }
    set {
      gPA_ = value;
    }
  }

  /// <summary>Field number for the "score" field.</summary>
  public const int ScoreFieldNumber = 5;
  private ulong score_;
  /// <summary>
  ///course's score that student gets (float)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Score {
    get { return score_; }
    set {
      score_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SRModifyInput);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SRModifyInput other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StudentID != other.StudentID) return false;
    if (CourseID != other.CourseID) return false;
    if (State != other.State) return false;
    if (GPA != other.GPA) return false;
    if (Score != other.Score) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StudentID.Length != 0) hash ^= StudentID.GetHashCode();
    if (CourseID.Length != 0) hash ^= CourseID.GetHashCode();
    if (State != false) hash ^= State.GetHashCode();
    if (GPA != 0UL) hash ^= GPA.GetHashCode();
    if (Score != 0UL) hash ^= Score.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StudentID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(StudentID);
    }
    if (CourseID.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(CourseID);
    }
    if (State != false) {
      output.WriteRawTag(24);
      output.WriteBool(State);
    }
    if (GPA != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(GPA);
    }
    if (Score != 0UL) {
      output.WriteRawTag(40);
      output.WriteUInt64(Score);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StudentID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(StudentID);
    }
    if (CourseID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CourseID);
    }
    if (State != false) {
      size += 1 + 1;
    }
    if (GPA != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GPA);
    }
    if (Score != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Score);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SRModifyInput other) {
    if (other == null) {
      return;
    }
    if (other.StudentID.Length != 0) {
      StudentID = other.StudentID;
    }
    if (other.CourseID.Length != 0) {
      CourseID = other.CourseID;
    }
    if (other.State != false) {
      State = other.State;
    }
    if (other.GPA != 0UL) {
      GPA = other.GPA;
    }
    if (other.Score != 0UL) {
      Score = other.Score;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          StudentID = input.ReadString();
          break;
        }
        case 18: {
          CourseID = input.ReadString();
          break;
        }
        case 24: {
          State = input.ReadBool();
          break;
        }
        case 32: {
          GPA = input.ReadUInt64();
          break;
        }
        case 40: {
          Score = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
